#!/usr/bin/env node

var program = require('commander');
var admatrix = require('../app');
var auth = admatrix.auth;
var Matrix = admatrix.Matrix;

program
  .version(Matrix.config.version);

program
  .command('heartbeat <cmd>')
  .description('Manages heartbeat')
  .action(function(cmd) {
    Matrix.service.heartbeat[cmd]();
  });

program
  .command('start')
  .description('Manages Start')

//TODO: add params for stuff
.action(function() {
  auth(function(err, data) {
    if (err) log(err);
    console.log('ADM SDK Init Complete');
  });
});

program.command('fake <sensor>').description('fire off a fake sensor for testing')
.action(function(sensor){
  // make new socket connection
  Matrix.events.emit('sensor-event', { type: sensor, value: 100 } );
});


program
  .command('app <cmd> [name]')
  .description('manage application lifecycle')
  .action(function(cmd, name) {
    // sends off the API command
    var cmds = ['list','install','uninstall','restart','start','stop','update'];
    if ( cmds.indexOf(cmd) > -1 ) {
      name = ( cmd === 'list' ) ? '' : name;
      Matrix.events.emit('api-data', { type: 'app.'+cmd, value: name });
      // to test SDK
      // Matrix.api.app[cmd](name, function(err, resp) {
      //   console.log(err, resp);
      // });
    } else {
      console.error(cmd, ' : is not a valid app command. Please try', cmds)
    }
  })


program
  .command('list <cmd>')
  .description('List Devices / Users / Clients')

//TODO: add params for stuff
.action(function(cmd) {

});

program.parse(process.argv);
